template:

  ####################################################
  #                                                  #
  #                     TEMPLATE                     #
  #                                                  #
  ####################################################

  select:
    - name: hdmi_bravia
      state: >
        {% set entity_id = 'media_player.sony_bravia_tv' %}
        {% if state_attr(entity_id, 'source') == None %}
          {{ state_attr(entity_id, 'source_list')[1] }}
        {% else %}
          {{ state_attr(entity_id, 'source') }}
        {% endif %}
      options: >
        {{ state_attr('media_player.sony_bravia_tv', 'source_list') }}
      select_option:
        service: media_player.select_source
        target:
          entity_id: media_player.sony_bravia_tv
        data:
          source: >
            {{ option }}

    - name: hdmi_samsung
      state: >
        {% set entity_id = 'media_player.samsung_tv' %}
        {% if state_attr(entity_id, 'source') == None %}
          {{ state_attr(entity_id, 'source_list')[1] }}
        {% else %}
          {{ state_attr(entity_id, 'source') }}
        {% endif %}
      options: >
        {% set entity_id = 'media_player.samsung_tv' %}
        {{ (state_attr(entity_id, 'source_list')[0], state_attr(entity_id, 'source_list')[1], 'Apple', 'PS5') | list }}
      select_option:
        service: media_player.select_source
        target:
          entity_id: media_player.samsung_tv
        data:
          source: >
            {{ option }}

  sensor:
    - unique_id: sidebar
      state: template
      attributes:
        time: >
          {% set hours = now().strftime('%H') %}
          {% set minutes = now().strftime('%M') %}
          <span class="time">
            {{ hours }}<span class="time-colon">:</span>{{ minutes }}
          </span>
        date: |
          <font color='#6a7377'><b>
          {%- if strptime(states('sensor.date'), '%Y-%m-%d').day != null %}
          {%- set days = ['Maandag', 'Dinsdag', 'Woensdag', 'Donderdag', 'Vrijdag', 'Zaterdag', 'Zondag'] %}
          {%- set months = ['Januari', 'Februari', 'Maart', 'April', 'Mei', 'Juni', 
          'Juli', 'Augustus', 'September', 'Oktober', 'November', 'December'] %}
            {{- days[now().weekday()] }}<br>
            {{- strptime(states('sensor.date'), '%Y-%m-%d').day }} {{ months[now().month-1] }}
          {%- endif -%}
          </b></font>
        greet: |
          <b>
          {%- set time = now().hour %}
          {%- if time <= 1 -%} Goedenacht {{'\U0001F611'}}
          {%- elif time <= 3 -%} Goedenacht {{'\U0001F62A'}}
          {%- elif time <= 5 -%} Goedenacht {{'\U0001F634'}}
          {%- elif time <= 7 -%} Goedemorgen {{'\U0001F4A9'}}
          {%- elif time <= 9 -%} Goedemorgen {{'\u2615\uFE0F'}}
          {%- elif time <= 11 -%} Goedemorgen {{'\U0001F642'}}
          {%- elif time <= 13 -%} Goedemiddag {{'\U0001F60A'}}
          {%- elif time <= 15 -%} Goedemiddag {{'\U0001F60E'}}
          {%- elif time <= 17 -%} Goedemiddag {{'\U0001F44B\U0001F3FB'}}
          {%- elif time <= 19 -%} Goedenavond {{'\U0001F44B\U0001F3FB'}}
          {%- elif time <= 22 -%} Goedenavond {{'\U0001F60C'}}
          {%- elif time <= 23 -%} Goedenavond {{'\U0001F974'}}
          {%- else %} Goedenavond {{'\U0001F974'}}
          {%- endif -%}
          </b>
        active: |
          <b>
          {%- set lights = [
            states.switch.koof_woonkamer_2,
            states.switch.lamp_gang,
            states.switch.lamp_overloop_1e_verdieping,
            states.switch.lamp_overloop_2e_verdieping,
            states.switch.plafondlamp_keuken,
            states.switch.plafondlamp_woonkamer_4,
            states.light.buffetkast,
            states.light.hanglamp_eettafel,
            states.light.wandlamp_woonkamer_2,
            states.switch.tuinverlichting_2,
            states.switch.tuinverlichting_2_2,
            states.switch.schakelaar_kantoor,
            states.switch.schakelaar_vip_lounge,
            states.switch.koof_keuken
          ] %}

          {%- set switches = [
            states.switch.ventilatie_6,
            states.switch.playstation_2,
            states.binary_sensor.nodered_552cc128beb296bf 
          ] %}

          {%- set lights_on = lights | selectattr('state','eq','on') | list %}
          {%- set lights_name = lights | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {%- set switches_on = switches | selectattr('state','eq','on') | list %} 
          {%- set switches_name = switches | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {%- if (lights_on | length == 0) and (switches_on | length > 0) -%} 
            {{ switches_name | regex_replace(',([^,]*)$',' en\\1') }} staat aan

          {%- elif (lights_on | length == 1) and (switches_on | length == 1) -%}
            {{ lights_name }} en {{switches_name }} staan aan

          {%- elif (lights_on | length == 1) and (switches_on | length > 1) -%}
            {{ lights_name }}, {{ switches_name | regex_replace(',([^,]*)$',' en\\1') }} staan aan

          {%- elif (lights_on | length > 1) and (switches_on | length == 1) -%}
            {{ lights_on | length }} lampen en {{ switches_name }} staan aan

          {%- elif (lights_on | length > 1) and (switches_on | length > 1) -%}
            {{ lights_on | length }} lampen, {{ switches_name | regex_replace(',([^,]*)$',' en\\1') }} staan aan

          {%- elif (lights_on | length == 1) and (switches_on | length == 0) -%}
            {{ lights_name }} staat aan

          {%- elif (lights_on | length > 1) and (switches_on | length == 0) -%}
            {{ lights_on | length }} lampen staan aan

          {%- else %}
            <font color='#6a7377'>Alles is uit!</font>
          {%- endif -%}
          </b>
        weather: |
          {%- set temperature = states('sensor.buitentemperatuur_owm_2') %}
          {%- set feels = states('sensor.buitentemperatuur_owm_feels_like') | round %}
          {%- set precip = states('sensor.precip_probability') | round %}
          {% if not is_state('sensor.buitentemperatuur_owm_2', 'unknown') %}
            {%- if temperature | float <= 0.0 -%}
              Voelt als {{ feels }}° met {{ precip }}% kans op sneeuw {{'\u2744\uFE0F'}}
            {%- elif temperature | float > 0.0 -%} 
              Voelt als {{ feels }}° met {{ precip }}% kans op regen {{ '\u2614\uFE0F' if precip > 30 }}
            {%- endif %}
          {%- else %}
            Kan weersinformatie niet laden...
          {%- endif %}
        transport: |
          {% set entity_id = 'sensor.skanetrafiken' %}
          {% if states(entity_id) != 'unknown' %}
          {%- set date = state_attr(entity_id, 'date') + ' ' + state_attr(entity_id, 'time') %}
          {%- set time = as_timestamp(date) | timestamp_custom('%H:%M') -%}
            Nästa buss går {{ time }} från {{ state_attr(entity_id, 'name').split()[1] }}
          {% endif %}
        battery: |
          {% set entities = [
            'sensor.dimmer_badrum_battery_level',
            'sensor.dimmer_sovrum_battery_level',
            'sensor.template_hue_motion_battery_badrum',
            'sensor.template_hue_motion_battery_garderob',
            'sensor.template_hue_motion_battery_hall',
            'sensor.switchbot_battery' ] %}
          {%- for sensor in entities if states(sensor) | int <= 5 and states(sensor) != 'unknown' %}
            {%- if loop.first %} {{-'\u26A0\uFE0F'}} Batterij {% else %}, {% endif -%}
            {{ state_attr(sensor, 'friendly_name') + ' ' +  states(sensor) + '%' }}
          {%- endfor %}
        calendar: |
          {%- set start_time = state_attr('calendar.ical_fam_van_den_boom', 'start_time') %}
          {%- set end_time = state_attr('calendar.ical_fam_van_den_boom', 'end_time') %}
          {%- set afspraak = state_attr('calendar.ical_fam_van_den_boom', 'message') %}
          {% if start_time != None %}
            {%- set time = as_timestamp(start_time) | timestamp_custom('%H:%M') %}
            {%- set time_end = as_timestamp(end_time) | timestamp_custom('%H:%M') %}
            {%- set hours = as_timestamp(start_time) | timestamp_custom('%H') | int / 24 %}
            {%- set count = (as_timestamp(start_time) - as_timestamp(now())) / 86400 - hours %}
            {%- set day = strptime(start_time, '%Y-%m-%d %H:%M:%S').strftime('%A') 
            | replace('Monday', 'Maandag')
            | replace('Tuesday', 'Dinsdag')
            | replace('Wednesday', 'Woensdag')
            | replace('Thursday', 'Donderdag')
            | replace('Friday', 'Vrijdag')
            | replace('Saturday', 'Zaterdag')
            | replace('Sunday', 'Zondag') %}
            {%- if count <= 0.0 -%}
              {{'\U0001F6D2'}} Afspraak vandaag tussen {{ time }}-{{ time_end }}
            {%- elif count <= 1.0 -%}
              Afsrpaak morgen tussen {{ time }}-{{ time_end }}
            {%- elif count <= 2.0 -%}
              Afspraak overmorgen tussen {{ time }}-{{ time_end }}
            {%- else -%}
              {{ afspraak }} over {{ (count + hours) | round }} dagen op {{ day }} tussen {{ time }}-{{ time_end }}
            {%- endif %}
          {%- endif %}
        nas: |
          {% if is_state('binary_sensor.treecentral_internet_access', 'off') -%}
            {{-'\u26A0\uFE0F'}} Controleer NAS internetverbinding
          {%- endif %}

    - unique_id: updates
      state: template
      attributes:
        esphome: >
          {% macro f(e) %}
            {{- device_attr(device_id('switch.' + e), 'sw_version') -}}
          {% endmacro %}
          {% set group = [f('doorbell_chime'), f('lamp_overloop_1e_verdieping'), f('lamp_overloop_2e_verdieping')] | min %}
          {% set installed = group.split()[0] %}
          {% set latest = states('sensor.esphome_version_latest') %}
          {% set url = 'https://github.com/esphome/esphome/releases/latest' %}
          {% if installed != latest %}
            <b><a href="#" onclick="window.open('{{ url }}');">ESPHome</a></b> {{ installed + ' \u279e ' + latest }}
          {% endif %}
        synology: >
          {% set installed = device_attr(device_id('sensor.treecentral_status'), 'sw_version').split(' ')[1] %}
          {% set latest = states('sensor.synology_dsm_latest') %}
          {% if is_state('binary_sensor.treecentral_update_available', 'on') %}
            <b>Synology DSM</b> {{ installed + ' \u279e ' + latest }}
          {% endif %}
#    - unique_id: dockermon_mem
#      icon: mdi:memory
#      state: >
#        {% set entity_id = 'sensor.docker_cpu' %}
#        {{ (state_attr(entity_id, 'memory_stats')['usage'] / 
#        state_attr(entity_id, 'memory_stats')['limit'] * 100) | round(1) | default(0) }}
#
    - unique_id: imac_vpn
      state: >
        {{ 'Ej Ansluten' if is_state('switch.computer_imac', 'on') and 
        states('sensor.imac_ip') == states('sensor.myip') else 'Ansluten' }}
      icon: >
        mdi:shield-{{ 'alert' if is_state('switch.computer_imac', 'on') and 
        states('sensor.imac_ip') == states('sensor.myip') else 'check' }}

    - unique_id: printer_status
      icon: mdi:printer-wireless
      state: >
        {% macro prt(state, translate) %}
        {{ translate if states('sensor.hp_deskjet_2600_series') == state }}
        {% endmacro %}
        {{ prt('On', 'Aan') }}
        {{ prt('Scanning', 'Skannar') }}
        {{ prt('Copying', 'Kopierar') }}
        {{ prt('Printing', 'Skriver ut') }}
        {{ prt('Cancelling Job', 'Avbryter') }}
        {{ prt('trayEmptyOrOpen', 'Inga papper') }}
        {{ prt('idle', 'Viloläge') }}
        {{ prt('Off', 'Av') }}

    - unique_id: fullykiosk_storage
      icon: mdi:sd
      unit_of_measurement: '%'
      state: >
        {% set FreeSpace = states('sensor.galaxy_tab_a_2016_internal_storage_free_space') | float %}
        {% set TotalSpace = states('sensor.galaxy_tab_a_2016_internal_storage_total_space') | float %}
        {% if not (FreeSpace == 0.0 or TotalSpace == 0.0) %}
          {{ 100 - (FreeSpace / TotalSpace * 100) | int }}
        {% endif %}

    - unique_id: fullykiosk_memory
      icon: mdi:memory
      unit_of_measurement: '%'
      state: >
        {% set FreeMemory = states('sensor.galaxy_tab_a_2016_ram_free_memory') | float %}
        {% set TotalMemory = states('sensor.galaxy_tab_a_2016_ram_total_memory') | float %}
        {% if not (FreeMemory == 0.0 or TotalMemory == 0.0) %}
          {{ 100 - (FreeMemory / TotalMemory * 100) | int }}
        {% endif %}

    - unique_id: fullykiosk_last_app_start
      icon: mdi:update
      device_class: timestamp
      state: >
        {{ states('sensor.galaxy_tab_a_2016_last_app_start') | replace(' ','T') }}

    - unique_id: treecentral_status
      icon: custom:synology-nas
      state: >
        {% set entity_id = 'sensor.treecentral_status' %}
        {% if is_state(entity_id, 'normal') %}
          Normaal
        {% elif is_state(entity_id, 'background') %}
          Controleertr
        {% else %}
          {{ states(entity_id) }}
        {% endif %}

#    - unique_id: hue_motion_battery_badrum
#      device_class: battery
#      unit_of_measurement: '%'
#      state: >
#        {{ state_attr('binary_sensor.sensor_badrum_motion', 'battery_level') }}

#    - unique_id: hue_motion_battery_hall
#      device_class: battery
#      unit_of_measurement: '%'
#      state: >
#        {{ state_attr('binary_sensor.sensor_hall_motion', 'battery_level') }}

#    - unique_id: hue_motion_battery_garderob
#      device_class: battery
#      unit_of_measurement: '%'
#      state: >
#        {{ state_attr('binary_sensor.sensor_garderob_motion', 'battery_level') }}

    - unique_id: hacs_version
      state: >
        {{ device_attr(device_id('sensor.hacs'), 'sw_version') }}

#legacy
sensor:

  - platform: template
    sensors:
      hass_version:
        icon_template: mdi:home-assistant
        friendly_name_template: >
          Geïnstalleerd {{ states('sensor.hass_version_installed') }}
        value_template: >
          {{ 'Laatste' if states('sensor.hass_version_installed') == 
          states('sensor.hass_version_latest') else 'Update' }}

      hass_dev_release:
        icon_template: mdi:dev-to
        device_class: timestamp
        friendly_name_template: >
          {% set release = state_attr('calendar.home_assistant_devs','message') %}
          {% if release == 'Home Assistant Core Beta Release' %}
            Nästa beta
          {% elif release == 'Home Assistant Core Release' %}
            Nästa release
          {% else %}
            {{ release }}
          {% endif %}
        value_template: >
          {{ state_attr('calendar.home_assistant_devs', 'start_time') | replace(' ','T') }}

      treecentral_net_down:
        friendly_name_template: ' '
        icon_template: mdi:arrow-down-bold
        value_template: >
          {% set down = states('sensor.treecentral_download_throughput') | float(default=0) %}
          {% if down < 1000 %} {{ down | round(0) }} kb/s
          {% elif down >= 1000 %} {{ ((down / 1000) | round(2) | string).rstrip('.0') }} Mb/s
          {% endif %}

      treecentral_net_up:
        friendly_name_template: ' '
        icon_template: mdi:arrow-up-bold
        value_template: >
          {% set up = states('sensor.treecentral_upload_throughput') | float(default=0) %}
          {% if up < 1000 %} {{ up | round(0) }} kb/s
          {% elif up >= 1000 %} {{ ((up / 1000) | round(2) | string).rstrip('.0') }} Mb/s
          {% endif %}
